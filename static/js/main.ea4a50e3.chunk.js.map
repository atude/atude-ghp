{"version":3,"sources":["assets/ic_atude.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","theme","createMuiTheme","palette","primary","main","secondary","error","red","contrastThreshold","tonalOffset","typography","useNextVariants","themeSidebar","type","dark","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sidebarState","open","toggleDrawer","side","setState","defineProperty","handleClick","getIcon","index","react_default","a","createElement","mdi_material_ui_index_es","getSideHead","className","src","icAtude","alt","index_es","style","fontSize","lineHeight","textAlign","variant","color","getSideList","button","key","onClick","in","timeout","unmountOnExit","component","disablePadding","inset","styles","anchor","onClose","onOpen","tabIndex","role","onKeyDown","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea4a50e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ic_atude.defb2faf.png\";","import React, { Component } from 'react';\nimport './App.css';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport { AppBar, Typography, IconButton, Button, Toolbar, SwipeableDrawer, List, ListItem, ListItemText, Divider, ListItemIcon, Collapse, Paper, } from '@material-ui/core';\nimport { Menu, AccountBox, Buffer, ChevronDown, ChevronUp, } from 'mdi-material-ui';\nimport icAtude from './assets/ic_atude.png'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#31393C\",\n    },\n    secondary: {\n      main: \"#2176FF\",\n    },\n\n    error: red,\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n    typography: { useNextVariants: true },\n  },\n});\n\nconst themeSidebar = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    secondary: {\n      main: \"#ffffff\",\n      dark: \"#ffffff\",\n    },\n    typography: { useNextVariants: true },\n  },\n});\n\nclass App extends Component {  \n  constructor(props) {\n    super(props);    \n  }\n\n  state = {\n    sidebarState: false,\n    open: false,\n  }\n\n  toggleDrawer = (side, state) => () => {\n    this.setState({\n      [side]: state,\n    });\n  };\n\n  handleClick = () => {\n    this.setState(state => ({ open: !state.open }));\n  };\n\n  getIcon = (index) => {\n    switch(index){\n      case 0: return <AccountBox/>;\n      case 1: return <Buffer/>;\n    }\n  }\n\n  render() {\n    const getSideHead = \n      <div className=\"SidebarHead\">\n        <img src={icAtude} alt=\"icAtude\" className=\"SidebarIconHead\"/>\n        <Typography style={{fontSize: \"24px\", lineHeight: \"32px\", textAlign: \"right\"}} \n          variant=\"overline\" color=\"textPrimary\">\n            Mozamel<br/><b>Anwary</b>\n        </Typography>\n        <br/>\n      </div>       \n\n    const getSideList = \n      <List>\n        <ListItem button key=\"About Me\">\n          <ListItemIcon>{this.getIcon(0)}</ListItemIcon>\n          <ListItemText primary=\"About Me\"/>\n        </ListItem>\n\n        <ListItem button onClick={this.handleClick} key=\"My Projects\">\n          <ListItemIcon>{this.getIcon(1)}</ListItemIcon>\n          <ListItemText primary=\"My Projects\"/>\n          {this.state.open \n            ? <ChevronDown color=\"secondary\"/> \n            : <ChevronUp  color=\"secondary\"/>}\n        </ListItem>\n          <Collapse in={this.state.open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" disablePadding>\n            <ListItem button>\n              <ListItemIcon></ListItemIcon>\n              <ListItemText inset primary=\"Devote\"/>\n            </ListItem>\n          </List>\n          </Collapse>\n      </List>       \n    \n    return (\n      <div>\n      <MuiThemeProvider theme={themeSidebar}>\n      <SwipeableDrawer variant=\"permanent\"\n      anchor=\"left\"\n      open={this.state.sidebarState}\n      onClose={this.toggleDrawer('sidebarState', false)}\n      onOpen={this.toggleDrawer('sidebarState', true)}>\n        <div tabIndex={0} role=\"button\" className=\"Sidebar\"\n          onClose={this.toggleDrawer('sidebarState', false)} \n          onKeyDown={this.toggleDrawer('sidebarState', false)}>\n          <div className=\"Sidebar\">\n            {getSideHead}\n            <Divider/>\n            {getSideList}\n          </div>\n        </div>\n      </SwipeableDrawer>\n      </MuiThemeProvider>\n\n      <MuiThemeProvider theme={theme}>\n        <div className=\"HomeContainer\">\n          <Typography>hello</Typography>\n        </div>\n      </MuiThemeProvider>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}