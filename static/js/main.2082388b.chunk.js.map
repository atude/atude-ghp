{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","indigo","secondary","pink","error","red","contrastThreshold","tonalOffset","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","left","toggleDrawer","side","open","setState","defineProperty","getIcon","index","react_default","a","createElement","mdi_material_ui_index_es","_this2","sideList","className","index_es","map","text","button","key","styles","style","zIndex","position","onClick","color","aria-label","variant","onClose","onOpen","tabIndex","role","onKeyDown","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAOMA,EAAQC,yBAAe,CAC3BC,QAAS,CACPC,QAASC,SACTC,UAAWC,OACXC,MAAOC,MACPC,kBAAmB,EACnBC,YAAa,MA2EFC,cAtEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGRQ,MAAQ,CACNC,MAAM,GALWR,EAQnBS,aAAe,SAACC,EAAMC,GAAP,OAAgB,WAC7BX,EAAKY,SAALX,OAAAY,EAAA,EAAAZ,CAAA,GACGS,EAAOC,MAVOX,EAcnBc,QAAU,SAACC,GACT,OAAOA,GACL,KAAK,EAAG,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACf,KAAK,EAAG,OAAOH,EAAAC,EAAAC,cAACC,EAAA,EAAD,QAjBAnB,wEAqBV,IAAAoB,EAAAjB,KAMDkB,EACJL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAPa,CACf,WACA,eAMcC,IAAI,SAACC,EAAMV,GAAP,OACZC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUG,QAAM,EAACC,IAAKF,GACpBT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAeH,EAAKN,QAAQC,IAC5BC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcjC,QAASmC,SAOjC,OACET,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACU,EAAA,iBAAD,CAAkBzC,MAAOA,GAEzB6B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQM,MAAO,CAACC,OAAQ,UAAWC,SAAS,YAC1Cf,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYS,QAAS7B,KAAKM,aAAa,QAASN,KAAKI,MAAMC,MAAOyB,MAAM,UAAUC,aAAW,QAC3FlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,OAEFH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYY,QAAQ,KAAKF,MAAM,WAA/B,oBAMJjB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBZ,KAAMR,KAAKI,MAAMC,KAClC4B,QAASjC,KAAKM,aAAa,QAAQ,GACnC4B,OAAQlC,KAAKM,aAAa,QAAQ,IAChCO,EAAAC,EAAAC,cAAA,OAAKoB,SAAU,EAAGC,KAAK,SACrBH,QAASjC,KAAKM,aAAa,QAAQ,GAAQ+B,UAAWrC,KAAKM,aAAa,QAAQ,IAC/EY,aA7DOoB,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2082388b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport {blue, indigo, pink, red, } from '@material-ui/core/colors';\nimport { AppBar, Typography, IconButton, Button, Toolbar, SwipeableDrawer, List, ListItem, ListItemText, Divider, ListItemIcon, } from '@material-ui/core';\nimport { Menu, AccountBox, Buffer, } from 'mdi-material-ui';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n});\n\nclass App extends Component {  \n  constructor(props) {\n    super(props);    \n  }\n\n  state = {\n    left: false,\n  }\n\n  toggleDrawer = (side, open) => () => {\n    this.setState({\n      [side]: open,\n    });\n  };\n\n  getIcon = (index) => {\n    switch(index){\n      case 0: return <AccountBox/>;\n      case 1: return <Buffer/>;\n    }\n  }\n\n  render() {\n    const subjects = [\n      'About Me',\n      'My Projects'\n    ];\n\n    const sideList = (\n      <div className=\"Sidebar\">\n        <List>\n          {subjects.map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{this.getIcon(index)}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>       \n      </div>\n    );\n\n    return (\n      <div>\n      <MuiThemeProvider theme={theme}>\n     \n      <AppBar style={{zIndex: \"100000\"}} position=\"relative\">\n        <Toolbar>\n          <IconButton onClick={this.toggleDrawer('left', !this.state.left)} color=\"inherit\" aria-label=\"Menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Mozamel Anwary\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <SwipeableDrawer open={this.state.left}\n      onClose={this.toggleDrawer('left', false)}\n      onOpen={this.toggleDrawer('left', true)}>\n        <div tabIndex={0} role=\"button\"\n          onClose={this.toggleDrawer('left', false)} onKeyDown={this.toggleDrawer('left', false)}>\n          {sideList}\n        </div>\n      </SwipeableDrawer>\n\n      </MuiThemeProvider>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}